/*************************************************
 ** GammaOranizer.cpp
 ** Class to hold and report info about gammas
 ** Written: S.V. Paulauskas - 17 Aug 2011
 ************************************************/
#include <fstream>
#include <iostream>

#include <cmath>
#include <cstdlib>

#include "GammaOrganizer.h"

using namespace std;

GammaOrganizer::GenInfoMap GammaOrganizer::genInfo;
GammaOrganizer::CoinInfoMap GammaOrganizer::coinInfo;
GammaOrganizer::FitInfoMap GammaOrganizer::fitInfo;

//********** GammaOrganizer() **********
GammaOrganizer::GammaOrganizer()
{
}


//********** ~GammaOrganizer() **********
GammaOrganizer::~GammaOrganizer()
{
}


//********** OutputGammaInformation **********
void GammaOrganizer::OutputGammaInformation(const int &gammaEnergy, const string &verbosity)
{
   GenInfoMap::iterator itTemp = genInfo.find(gammaEnergy);

   if(itTemp == genInfo.end()) {
      cout << "Couldn't find the specified energy. Try again" << endl;
   }else {
      cout << (*itTemp).first << " " << (*itTemp).second.spectrum << " "
	   << (*itTemp).second.nucleus << " " << (*itTemp).second.halfLife << "ms  " 
	   << (*itTemp).second.comment << endl;
   }
}


//********** ParseLineDouble **********
double GammaOrganizer::ParseLineDouble(string &line)
{
   double temp = atof(line.substr(0, line.find(" ")).c_str());
   line.erase(0, line.find(" ") + 1);
   return(temp);
}


//********** ParseLineInt *********
int GammaOrganizer::ParseLineInt(string &line)
{
   int temp = atoi(line.substr(0, line.find(" ")).c_str());
   line.erase(0, line.find(" ") + 1);
   return(temp);
}


//********** ParseLineString **********
string GammaOrganizer::ParseLineString(string &line)
{
   string temp = line.substr(0, line.find(" ")).c_str();
   line.erase(0, line.find(" ") +1);
   return (temp);
}


//********** ReadGeneralInformation **********
void GammaOrganizer::ReadGeneralInformation(void) 
{
   ifstream genInfoFile("generalInfo.dat");
   if(genInfoFile.is_open()) {
      while(genInfoFile.good()) {
	 GeneralInformation data;
	 string line;
	 
	 getline(genInfoFile, line);
	 if(line.find("#") != string::npos)
	    continue;

	 size_t foundQuoteBegin = line.find("\"");
	 size_t foundQuoteEnd   = line.find("\"", int(foundQuoteBegin)+1);
	 int commentSize = foundQuoteEnd - foundQuoteBegin;

	 data.comment = line.substr(int(foundQuoteBegin) + 1, commentSize -1);
	 line.erase(foundQuoteBegin);

	 int gammaEnergy  = ParseLineInt(line);
	 data.spectrum = ParseLineInt(line);
	 data.nucleus  = ParseLineString(line);
	 data.halfLife = ParseLineDouble(line);

	 genInfo.insert(make_pair(gammaEnergy, data));
      } // while(genInfoFile.good())
   }else {
      cout << "Couldn't open \"generalInfo.dat\"" 
	   << "  This is fatal!" << endl << "Exiting" << endl;
      exit(2);
   } // if(genInfoFile.is_open())
}


//********** ReadCoincidenceInformation ***********
void GammaOrganizer::ReadCoincidenceInformation(void)
{
   ifstream coinInfoFile("coincidenceInfo.dat");
   if(coinInfoFile.is_open()) {
      while(coinInfoFile.good()) {
	 CoincidenceInformation data;
	 string line;
	 
	 getline(coinInfoFile, line);
	 if(line.find("#") != string::npos)
	    continue;

	 //Get the Coincidence gammas
	 size_t foundQuoteBegin = line.find("\"");
	 size_t foundQuoteEnd   = line.find("\"", int(foundQuoteBegin)+1);
	 int commentSize = foundQuoteEnd - foundQuoteBegin;

	 string coinGammas = 
	    line.substr(int(foundQuoteBegin) + 1, commentSize - 1);
	 line.erase(foundQuoteBegin, commentSize);

	 while(!coinGammas.empty()) {
	    size_t found = coinGammas.find(" ");
	    data.coincidences.push_back(atoi(coinGammas.substr(0, found).c_str()));
	    coinGammas.erase(0,found+1);
	    if(found == string::npos)
	       coinGammas.clear();
	 }

	 //Get the Comment
	 size_t foundQuoteBegin0 = line.find("\"");
	 size_t foundQuoteEnd0   = line.find("\"", int(foundQuoteBegin0)+1);
	 int commentSize0 = foundQuoteEnd0 - foundQuoteBegin0;

	 data.comment = line.substr(int(foundQuoteBegin0) + 1, commentSize - 1);
	 line.erase(foundQuoteBegin0, commentSize0);

	 int gammaEnergy = ParseLineInt(line);
	 data.gammaLow   = ParseLineInt(line);
	 data.gammaHigh  = ParseLineInt(line);
	 data.bkgLowA    = ParseLineInt(line);
	 data.bkgHighA   = ParseLineInt(line);
	 data.bkgLowB    = ParseLineInt(line);
	 data.bkgHighB   = ParseLineInt(line);

	 coinInfo.insert(make_pair(gammaEnergy, data));
      } // while(coinInfoFile.good())
   }else {
      cout << "Couldn't open \"coincidenceInfo.dat\"" 
	   << "  This is fatal!" << endl << "Exiting" << endl;
      exit(2);
   } // if(coinInfoFile.is_open())
}


//********** ReadFitInformation(void) **********
void GammaOrganizer::ReadFitInformation(void) 
{
}



